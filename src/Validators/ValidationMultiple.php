<?php
declare(strict_types=1);

namespace WScore\Validation\Validators;

use WScore\Validation\Interfaces\FilterInterface;
use WScore\Validation\Interfaces\ResultInterface;
use WScore\Validation\Interfaces\ValidationInterface;
use WScore\Validation\Locale\Messages;

/**
 * validates a multiple inputs (i.e. an array).
 *
 * @package WScore\Validation\Validators
 */
class ValidationMultiple extends AbstractValidation
{
    /**
     * @var FilterCollection
     */
    private $postFilters;

    /**
     * ValidationMultiple constructor.
     * @param Messages $message
     */
    public function __construct(Messages $message)
    {
        parent::__construct($message);
        $this->postFilters = new FilterCollection();
    }

    /**
     * @param array $filters
     * @return ValidationInterface
     */
    public function addFilters(array $filters): ValidationInterface
    {
        parent::addFilters($filters); // TODO: Change the autogenerated stub
        $this->preparePostFilters();

        return $this;
    }

    /**
     * @param string|array $value
     * @return ResultInterface|ResultList
     */
    public function verify($value)
    {
        return $this->callVerify($value);
    }

    /**
     * @param array|string $value
     * @param string|null $name
     * @param ResultInterface|null $parentResult
     * @return mixed|ResultInterface|ResultList
     */
    public function callVerify($value, $name = null, ResultInterface $parentResult = null)
    {
        $result = $this->initialize($value, $name);
        $result->setParent($parentResult);
        $result = $this->validate($result);
        $result->finalize($this->message, $this->error_message);
        return $result;
    }

    /**
     * @param string[] $value
     * @param string|null $name
     * @return ResultInterface|ResultList
     */
    private function initialize($value, $name)
    {
        $results = new ResultList($value, $name);
        // apply pre-filters.
        foreach ($this->preFilters as $filter) {
            if ($returned = $filter->apply($results)) {
                break;
            }
        }
        return $results;
    }

    /**
     * @param ResultInterface|ResultList $results
     * @return ResultInterface
     */
    private function validate($results)
    {
        $values = $results->value();
        foreach ($values as $key => $val) {
            $result = new Result($val);
            $results->addResult($result, $key);
            $this->applyFilters($result);
        }
        foreach ($this->postFilters as $postFilter) {
            if ($returned = $postFilter->apply($results)) {
                return $results;
            }
        }
        return $results;
    }

    private function preparePostFilters()
    {
        $postFilters = [];
        foreach ($this->filters as $key => $filter) {
            if ($filter->isFilterForMultiple()) {
                $postFilters[$key] = $filter;
                $this->filters->remove($key);
            }
        }
        $this->postFilters->addFilters($postFilters);
    }
}